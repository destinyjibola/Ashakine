// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                  String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  username            String?
  email               String                 @unique
  emailVerified       DateTime?
  role                UserRole               @default(USER)
  image               String?
  password            String?
  accounts            Account[]
  sessions            Session[]
  projects            ProjectMember[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  isTwoFactorEnabled  Boolean                @default(false)
  towFactConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordRestToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  members     ProjectMember[]
  tasks       Task[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  projectId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  startTime   DateTime
  endTime     DateTime
  duration    Int      @default(0)
  frequency   Int
  evidence    String
  remarks     String
  ratings     Int
  default     Boolean
  notify      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String   @db.ObjectId
}
